{
    "parser": "@typescript-eslint/parser",
    "extends": [
        "eslint:recommended",
        "plugin:@typescript-eslint/recommended",
        "plugin:react/recommended",
        "plugin:import/errors",
        "plugin:import/warnings"
    ],
    "plugins": [
        "@typescript-eslint",
        "react",
        "react-hooks",
        "jsdoc",
        "import",
        "prefer-arrow"
    ],
    "settings": {
        "react": {
            "pragma": "React",
            "version": "detect"
        }
    },
    "parserOptions": {
        "ecmaFeatures": {
            "jsx": true
        }
    },
    "rules": {
        "@typescript-eslint/adjacent-overload-signatures": "error",
        "key-spacing": [
            "error",
            {
                "beforeColon": false,
                "afterColon": true,
                "mode": "strict"
            }
        ],
        "@typescript-eslint/array-type": [
            "error",
            "array"
        ],
        "arrow-parens": "off",
        "arrow-body-style": [
            "error",
            "as-needed"
        ],
        "@typescript-eslint/ban-types": [
            "error",
            {
                "types": {
                    "Object": "Avoid using the `Object` type. Did you mean `object`?",
                    "Function": "Avoid using the `Function` type. Prefer a specific function type, like `() => void`.",
                    "Boolean": "Avoid using the `Boolean` type. Did you mean `boolean`?",
                    "Number": "Avoid using the `Number` type. Did you mean `number`?",
                    "String": "Avoid using the `String` type. Did you mean `string`?",
                    "Symbol": "Avoid using the `Symbol` type. Did you mean `symbol`?"
                }
            }
        ],
        "@typescript-eslint/prefer-function-type": "error",
        "@typescript-eslint/class-name-casing": "error",
        "spaced-comment": [
            2,
            "always"
        ],
        "curly": "error",
        "complexity": "off",
        "eol-last": "error",
        "guard-for-in": "error",
        "object-curly-spacing": "error",
        "indent": [
            "error",
            4
        ],
        "@typescript-eslint/interface-name-prefix": [
            "error",
            "never"
        ],
        "@typescript-eslint/prefer-interface": "off",
        "jsdoc-format": true,
        "jsdoc/check-alignment": 1,
        "jsdoc/check-examples": 1,
        "jsdoc/check-indentation": 1,
        "jsdoc/check-param-names": 1,
        "jsdoc/check-syntax": 1,
        "jsdoc/check-tag-names": 1,
        "jsdoc/check-types": 1,
        "jsdoc/require-param": 1,
        "jsdoc/require-returns": 1,
        "jsdoc/require-returns-type": 1,
        "jsdoc/valid-types": 1,
        "react/jsx-boolean-value": [
            "error",
            "always"
        ],
        "react/jsx-curly-spacing": [
            "error",
            {
                "when": "never"
            }
        ],
        "react/jsx-equals-spacing": [
            "error",
            "never"
        ],
        "react/jsx-key": "error",
        "react/jsx-no-bind": "error",
        "react/no-string-refs": "error",
        "react/jsx-tag-spacing": ["error", {
            "closingSlash": "never",
            "beforeSelfClosing": "always",
            "afterOpening": "never",
            "beforeClosing": "allow"
        }],
        "react/jsx-wrap-multilines": "error",
        "no-labels": "error",
        "no-unused-labels": "error",
        "max-classes-per-file": [
            "error",
            1
        ],
        "max-len": [
            "error",
            {
                "code": 160
            }
        ],
        "@typescript-eslint/explicit-member-accessibility": ["error", {
            "accessibility": "explicit"
        }],
        "@typescript-eslint/member-ordering": ["error", {
            "default": [
                "public-static-field",
                "public-instance-method"
            ]
        }],
        "new-parens": "error",
        "@typescript-eslint/no-angle-bracket-type-assertion": "error",
        "@typescript-eslint/no-explicit-any": "off",
        "no-caller": "error",
        "no-bitwise": "error",
        "no-cond-assign": "error",
        "no-multiple-empty-lines": "error",
        "no-console": "error",
        "no-new-wrappers": "error",
        "no-debugger": "error",
        "import/no-default-export": "error",
        "constructor-super": "error",
        "no-redeclare": "error",
        "no-empty": "error",
        "@typescript-eslint/no-empty-interface": "error",
        "no-eval": "error",
        "import/no-internal-modules": [
            "error"
        ],
        "no-invalid-this": "off",
        "@typescript-eslint/no-misused-new": "error",
        "@typescript-eslint/no-namespace": "error",
        "@typescript-eslint/no-parameter-properties": "error",
        "no-parameter-properties": "off",
        "@typescript-eslint/no-triple-slash-reference": "error",
        "no-require-imports": "off",
        "no-shadow": "error",
        "dot-notation": "error",
        "no-throw-literal": "error",
        "no-fallthrough": "off",
        "no-trailing-spaces": "error",
        "no-undef-init": "error",
        "no-unsafe-finally": "error",
        "no-unused-expressions": "error",
        "no-use-before-define": "error",
        "no-var": "error",
        "@typescript-eslint/no-var-requires": "error",
        "quote-props": [
            "error",
            "consistent-as-needed"
        ],
        "object-shorthand": "error",
        "sort-keys": "off",
        "one-var": [
            "error",
            {
                "var": "never",
                "let": "never",
                "const": "never"
            }
        ],
        "prefer-arrow/prefer-arrow-functions": "error",
        "prefer-arrow-callback": "error",
        "sort-imports": "off",
        "prefer-const": "error",
        "@typescript-eslint/prefer-for-of": "error",
        "quotes": [
            "error",
            "double",
            {
                "avoidEscape": true
            }
        ],
        "radix": "error",
        "semi": [
            "error",
            "always"
        ],
        "space-before-function-paren": [
            "error",
            {
                "anonymous": "never",
                "asyncArrow": "always",
                "named": "never"
            }
        ],
        "default-case": "error",
        "comma-dangle": [
            "error",
            "never"
        ],
        "eqeqeq": [
            "error",
            "always",
            {
                "null": "ignore"
            }
        ],
        "@typescript-eslint/explicit-function-return-type": "error",
        "@typescript-eslint/type-annotation-spacing": ["error", {
            "before": false,
            "after": true
        }],
        "@typescript-eslint/unified-signatures": "error",
        "use-isnan": "error"
    }
}